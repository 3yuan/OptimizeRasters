<?xml version="1.0" encoding="utf-8"?>
<!--Please note: Paths and extensions defined herein are considered as case-sensitive in OptimizeRasters.py -->
<OptimizeRasters>
  <Defaults>
   <!-- Acceptable modes are [mrf, mrf_jpeg, tif, tif_lzw, tif_jpeg, cachingmrf, clonemrf, splitmrf] -->
    <Mode>cachingmrf</Mode>
    <!-- File extensions considered as (Rasters). These files will not be copied from the input path -->
    <RasterFormatFilter>tif,TIF,tiff,TIFF</RasterFormatFilter>
    <!-- File extensions to ignore complety while copying files/data from the input path -->
   <ExcludeFilter>tmp, ovr, rrd, idx, lrc, mrf_cache, pjp, ppng, pft, pzp, json</ExcludeFilter>
    <!-- Compression to use on output (Rasters) -->
    <Compression>lerc</Compression>
    <Interleave></Interleave>
     <!-- Compression quality to apply for JPEG compression. (Def: 85) -->
    <Quality>85</Quality>
     <!-- LERC precision to apply for LERC compression -->
    <LERCPrecision>0.5</LERCPrecision>
     <!-- Build pyramids? Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n, only] -->
    <BuildPyramids></BuildPyramids>	
     <!-- Pyramid levels to create (Def:  2) -->
    <PyramidFactor>2 4 8 16 32 64</PyramidFactor>
    <!-- Pyramid sampling [nearest,average,gauss,cubic,cubicspline,lanczos,average_mp,average_magphase,mode] (Def: average) -->
    <PyramidSampling></PyramidSampling>
    <!--  Pyramid compression [jpeg, lzw, deflate] (Def: jpeg) -->
    <PyramidCompression>JPEG</PyramidCompression>
    <!-- No data value. If undefined/empy value  -a_nodata will not be applied. (Def: undefined) -->
    <NoDataValue></NoDataValue>
    <!-- Output title size -->
    <BlockSize>512</BlockSize>
    <Scale>3</Scale>
    <!-- ‘True’ to keep input raster extensions else outputs will be renamed to ‘mrf’. Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n] -->
    <KeepExtension>True</KeepExtension>
    <!-- Simultaneous threads to use for parallel processing /instances of gdal_translate/gdal_addo/e.t.c (Def: 10) -->
    <Threads>4</Threads>
    <!-- Path to gdal_translate and gdal_addo -->   
    
    <LogPath>d:\Kazakhstan\OptimizeRasters-master\Logs</LogPath>
    <!-- 'True' will scan for (Rasters) in sub-directories. Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n] -->
    <IncludeSubdirectories>True</IncludeSubdirectories>
    <!-- Starting output folder location to store converted data on S3-->		
    <Out_S3_ParentFolder></Out_S3_ParentFolder>
    <Out_S3_ID></Out_S3_ID>
    <Out_S3_Secret></Out_S3_Secret>
    <!-- If ‘true’ generated output files with any extra files copied from input  will be uploaded to S3. Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n] -->
    <Out_S3_Upload>false</Out_S3_Upload>
    <!-- If ‘true’ generated output will be deleted once uploaded to S3. Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n] -->
    <Out_S3_DeleteAfterUpload>True</Out_S3_DeleteAfterUpload>
    <Out_S3_Bucket></Out_S3_Bucket>
    <!-- Starting input folder to scan for (Rasters) and to copy any other files that do not end with extensions in <ExcludeFilter> -->
    <In_S3_ParentFolder>test</In_S3_ParentFolder>
    <In_S3_ID></In_S3_ID>
    <In_S3_Secret></In_S3_Secret>
    <In_S3_Bucket>landsat-pds</In_S3_Bucket>
  </Defaults>
</OptimizeRasters>