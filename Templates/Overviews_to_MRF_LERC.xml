<?xml version="1.0" encoding="utf-8"?>
<!--Please note: Paths and extensions defined herein are considered as case-sensitive in OptimizeRasters.py -->
<OptimizeRasters>
	<Defaults>
		<!-- Acceptable modes are [mrf, mrf_jpeg, tif, tif_lzw, tif_jpeg, cachingmrf, clonemrf, splitmrf] -->
		<Mode>MRF</Mode>
		<!-- File extensions considered as (Rasters). These files will not be copied from the input path -->
		<RasterFormatFilter>tif,tiff,TIF,TIFF,img,jp2,JP2,IMG</RasterFormatFilter>
		<!-- File extensions to ignore complety while copying files/data from the input path -->
		<ExcludeFilter>tmp,rrd,idx,lrc,mrf_cache,pjp,ppng,pft,pzp,ovr,aux.xml,aux,tfw,TFW</ExcludeFilter>
		<!-- 'True' will scan for (Rasters) in sub-directories. Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n] -->
		<IncludeSubdirectories>True</IncludeSubdirectories>
		<!-- Compression to use on output (Rasters) -->
		<Compression>LERC</Compression>
		<!-- how the data is stored as Pixel interleave or band interleave, for cloneMRF the value should be same. (Def : Pixel)  -->
		<Interleave></Interleave>
		<!-- Compression quality to apply for JPEG compression. (Def: 85) -->
		<Quality></Quality>
		<!-- LERC precision to apply for LERC compression. (Def : 0.5) -->
		<LERCPrecision></LERCPrecision>
		<!-- Build pyramids? Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n, only] -->
		<BuildPyramids>False</BuildPyramids>
		<!-- Pyramid levels to create (Def:  2) -->
		<PyramidFactor>2 4 8 16 32 64</PyramidFactor>
		<!-- Pyramid sampling [nearest,average,gauss,cubic,cubicspline,lanczos,average_mp,average_magphase,mode] (Def: average) -->
		<PyramidSampling>avg</PyramidSampling>
		<!--  Pyramid compression [jpeg, lzw, deflate] (Def: jpeg) -->
		<PyramidCompression>LERC</PyramidCompression>
		<!-- No data value. If undefined/empy value  -a_nodata will not be applied. (Def: undefined) -->
		<NoDataValue></NoDataValue>
		<!-- Output title size -->
		<BlockSize>512</BlockSize>
		<!-- This needs to specified when generating caching or clone MRF, the value should be based on the input raster pyramid factor default is 2  -->
		<Scale></Scale>
		<!-- ‘True’ to keep input raster extensions else outputs will be renamed to ‘mrf’. Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n] -->
		<KeepExtension>false</KeepExtension>
		<!-- Simultaneous threads to use for parallel processing /instances of gdal_translate/gdal_addo/e.t.c (Def: 10) -->
		<Threads>4</Threads>
		<!-- Path where the logs will be stored -->
		<LogPath></LogPath>
		<!-- Access Key ID for Amazon account to which the data will be uploaded-->
		<Out_S3_ID></Out_S3_ID>
		<!-- Secret Access Key for Amazon account to which the data will be uploaded-->
		<Out_S3_Secret></Out_S3_Secret>
		<!--bucket name to which the data will be uploaded  -->
		<Out_S3_Bucket></Out_S3_Bucket>
		<!-- Set canned ACL to apply to uploaded files. Acceptable values are [private, public-read, public-read-write, authenticated-read, bucket-owner-read,bucket-owner-full-control]-->
		<Out_S3_ACL></Out_S3_ACL>
		<!-- Starting output folder location to store converted data on S3-->
		<Out_S3_ParentFolder></Out_S3_ParentFolder>
		<!-- If ‘true’ generated output files with any extra files copied from input  will be uploaded to S3. Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n] -->
		<Out_S3_Upload>F</Out_S3_Upload>
		<!-- If ‘true’ generated output will be deleted once uploaded to S3. Acceptable values are [true, yes, t, 1, y, false, no, f, 0, n] -->
		<Out_S3_DeleteAfterUpload>True</Out_S3_DeleteAfterUpload>
		<!-- Access Key ID for Amazon account from where the data will be accesed or downloaded-->
		<In_S3_ID></In_S3_ID>
		<!-- Sceret Access Key for Amazon account from where the data will be accesed or downloaded-->
		<In_S3_Secret></In_S3_Secret>
		<!--bucket name to from which the data will be accessed or downlaoded  -->
		<In_S3_Bucket></In_S3_Bucket>
		<!-- Starting input folder to scan for (Rasters) and to copy any other files that do not end with extensions in <ExcludeFilter> -->
		<In_S3_ParentFolder></In_S3_ParentFolder>
	</Defaults>
</OptimizeRasters>
